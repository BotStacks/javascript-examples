export declare const InAppChat: {
    init(apiKey: string): Promise<void>;
    createChatStore(): Instance<IModelType<{
        user_repo: any;
        chat_repo: IOptionalIType<IModelType<{
            byId: IMapType<any>;
            fetching: IMapType<ISimpleType<"fetching" | "not_found">>;
        }, {
            create(input: import("./api/ops").CreateGroupInput): Promise<Instance<any>>;
            createOrUpdate(props: import("./api/ops").FChatFragment): Instance<any>;
            fetch(id: string): any;
            get(id: string): any;
        }>, [undefined]>;
        message_repo: IOptionalIType<any, [undefined]>;
        loading: IOptionalIType<ISimpleType<boolean>, [undefined]>;
        loggingIn: IOptionalIType<ISimpleType<boolean>, [undefined]>;
        blocks: IOptionalIType<IArrayType<ISimpleType<string>>, [undefined]>;
        blockedBy: IOptionalIType<IArrayType<ISimpleType<string>>, [undefined]>;
        memberships: IOptionalIType<IModelType<{
            items: IArrayType<IReferenceType<any>>;
        }, {
            readonly groups: Instance<any>[];
            readonly groups_unread_count: number;
            readonly dms: Instance<any>[];
            readonly dm_unread_count: number;
            add(membership: Instance<any>): void;
            dm(id: string): Promise<any>;
        }>, [undefined]>;
        users: IOptionalIType<IModelType<import("./state").IListStateModelProps & Props & {
            items: IOptionalIType<IArrayType<IReferenceType<T>>, [undefined]>;
        }, import("./state").IListStateModelActions & Actions>, [undefined]>;
        groups: IOptionalIType<IModelType<import("./state").IListStateModelProps & Props & {
            items: IOptionalIType<IArrayType<IReferenceType<T>>, [undefined]>;
        }, import("./state").IListStateModelActions & Actions>, [undefined]>;
        favorites: IOptionalIType<IModelType<import("./state").IListStateModelProps & Props & {
            items: IOptionalIType<IArrayType<IReferenceType<T>>, [undefined]>;
        }, import("./state").IListStateModelActions & Actions>, [undefined]>;
        events: IOptionalIType<any, [undefined]>;
    }, {
        login: (input: import("./api/ops").LoginInput) => Promise<void>;
        logout: () => Promise<void>;
        ethLogin: (input: import("./api/ops").EthLoginInput) => Promise<void>;
        load: () => Promise<void>;
        readonly user: Instance<any>;
        readonly isLoggedIn: boolean;
    }>>;
};
