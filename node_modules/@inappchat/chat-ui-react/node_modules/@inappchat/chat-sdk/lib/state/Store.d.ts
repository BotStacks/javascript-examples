import { IArrayType, IModelType, IOptionalIType, ISimpleType, Instance, SnapshotOut } from 'mobx-state-tree';
import { EthLoginInput, LoginInput } from '../api/ops';
import { IChatsType } from './Chats';
import { IFavoritesListType } from './FavoritesList';
import { IGroupsListType } from './GroupsList';
import { IMembershipsType } from './Memberships';
import { IMessagesType } from './Messages';
import { IUser, IUsersType } from './Users';
import { IUsersListType } from './UsersList';
import { IEventsType } from './Events';
/**
 * A RootStore model.
 */
export declare const InAppChatModel: IModelType<{
    user_repo: IUsersType;
    chat_repo: IOptionalIType<IChatsType, [undefined]>;
    message_repo: IOptionalIType<IMessagesType, [undefined]>;
    loading: IOptionalIType<ISimpleType<boolean>, [undefined]>;
    loggingIn: IOptionalIType<ISimpleType<boolean>, [undefined]>;
    blocks: IOptionalIType<IArrayType<ISimpleType<string>>, [undefined]>;
    blockedBy: IOptionalIType<IArrayType<ISimpleType<string>>, [undefined]>;
    memberships: IOptionalIType<IMembershipsType, [undefined]>;
    users: IOptionalIType<IUsersListType, [undefined]>;
    groups: IOptionalIType<IGroupsListType, [undefined]>;
    favorites: IOptionalIType<IFavoritesListType, [undefined]>;
    events: IOptionalIType<IEventsType, [undefined]>;
}, {
    login: (input: LoginInput) => Promise<void>;
    logout: () => Promise<void>;
    ethLogin: (input: EthLoginInput) => Promise<void>;
    load: () => Promise<void>;
    readonly user: IUser;
    readonly isLoggedIn: boolean;
}>;
/**
 * The RootStore instance.
 */
export type InAppChatStore = Instance<typeof InAppChatModel>;
/**
 * The data of a RootStore.
 */
export type InAppChatSnapshot = SnapshotOut<typeof InAppChatModel>;
